devtools::install()
library(kittens)
#### Load Memory Files ####
source("rac/libraries.R")
#### Load Memory Files ####
source("rac/libraries.R")
#### Load Memory Files ####
source("rac/libraries.R")
library(usethis)
library(devtools)
usethis::create_package(here::here())
use_r("fbind.R")
devtools::check()
library(usethis)
library(devtools)
library(dplyr)
library(usethis)
library(devtools)
totals <- function(df, return) {
rowtotal <- rowSums(Filter(is.numeric, df), na.rm = TRUE)
colsum_df <- colSums(Filter(is.numeric, df), na.rm = TRUE)
summarise_col <- df %>% summarise_if(is.numeric, sum, na.rm = TRUE)
col_sum <- summarise_all(df, funs(if(is.numeric(.)) sum(.) else "Character values found"))
totals_row <- rbind(Filter(is.numeric,df),totals = rowtotal)
totals_col <- cbind(Filter(is.numeric,df), totals = colsum_df)
#weighted_avg <- weighted.mean(Filter(is.numeric, df), w1, na.rm=TRUE)
if (return == "totals_row") {
return (list(rowtotal, totals_row, table(totals_row)))
} else if (return == 'totals_col') {
return (list(colsum_df, colsum_df, col_sum, totals_col, summarise_col, table(col_sum)))
#} else if (return == 'weighted_avg') {
# return( weighted_avg)
} else {
return (colsum_df)
}
}
weighted_avg <- function(df,w){
weighted_mean <- weighted.mean(Filter(is.numeric, df), w, na.rm=TRUE)
return (weighted_mean)
}
usethis::create_package(here::here())
usethis::create_package(here::here())
install.packages("roxygen2")
library(dplyr)
library(usethis)
library(devtools)
library(roxygen2)
usethis::create_package(here::here())
3
install.packages("roxygen2")
install.packages("Rtools")
setwd("kittens")
getwd()
create("totals")
totals <- function(df, return) {
rowtotal <- rowSums(Filter(is.numeric, df), na.rm = TRUE)
colsum_df <- colSums(Filter(is.numeric, df), na.rm = TRUE)
summarise_col <- df %>% summarise_if(is.numeric, sum, na.rm = TRUE)
col_sum <- summarise_all(df, funs(if(is.numeric(.)) sum(.) else "Character values found"))
totals_row <- rbind(Filter(is.numeric,df),totals = rowtotal)
totals_col <- cbind(Filter(is.numeric,df), totals = colsum_df)
#weighted_avg <- weighted.mean(Filter(is.numeric, df), w1, na.rm=TRUE)
if (return == "totals_row") {
return (list(rowtotal, totals_row, table(totals_row)))
} else if (return == 'totals_col') {
return (list(colsum_df, colsum_df, col_sum, totals_col, summarise_col, table(col_sum)))
#} else if (return == 'weighted_avg') {
# return( weighted_avg)
} else {
return (colsum_df)
}
}
x <- c(2,2)
y <- c(2,2)
x_w <- c(2,6)
y_w <- c(1,5)
df_w <- data.frame(x_w, y_w)
df <- data.frame(x,y)
totals(df,  "totals_col")
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
#' @title totals
#'
#' @description calculate row sum, col sum, weighted average
#'
#' @param df the data frame you wish to perform the row sum or column sum function
#'
#' @param return specify either totals_row or totals_col or weighted_avg
#'
#' @param weighted_avg specify weighted_avg of the matrix/df
#'
#' @return returns specify either totals_row or totals_col or weighted_avg of the data frame or tibble with summary of rows or columns
#'
#' @w1 is the weighted average for df
#'
#' @export totals
#'
#' @importFrom dplyr "%>%" "select" "group_by" "tally" "filter"
#'
#' @example
#'
#' x <- c(2,2)
#' y <- c(2,2)
#' x_w <- c(2,6)
#' y_w <- c(1,5)
#' df_w <- data.frame(x_w, y_w)
#' df <- data.frame(x,y)
#' totals(df,  'weighted_avg' , df_w)
library(dplyr)
totals <- function(df, return, w1) {
rowtotal <- rowSums(Filter(is.numeric, df), na.rm = TRUE)
colsum_df <- colSums(Filter(is.numeric, df), na.rm = TRUE)
#summarise_col <- df %>% summarise_if(is.numeric, sum, na.rm = TRUE)
#col_sum <- summarise_all(df, funs(if(is.numeric(.)) sum(.) else "Character values found"))
totals_row <- rbind(Filter(is.numeric,df),totals = rowtotal)
totals_col <- cbind(Filter(is.numeric,df), totals = colsum_df)
weighted_avg <- weighted.mean(Filter(is.numeric, df), w1, na.rm=TRUE)
if(missing(w1) & return == 'totals_row') {
return (list(rowtotal, totals_row, table(totals_row)))
} else if (missing(w1) & return == 'totals_col') {
return (list(colsum_df, colsum_df, totals_col)) #table(col_sum), col_sum, #summarise_col
} else if (return == 'weighted_avg') {
return( weighted_avg)
}
}
devtools::document()
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
#' @title totals
#'
#' @description calculate row sum, col sum, weighted average
#'
#' @param df the data frame you wish to perform the row sum or column sum function
#'
#' @param return specify either totals_row or totals_col or weighted_avg
#'
#' @param weighted_avg specify weighted_avg of the matrix/df
#'
#' @return returns specify either totals_row or totals_col or weighted_avg of the data frame or tibble with summary of rows or columns
#'
#' @w1 is the weighted average for df
#'
#' @export totals
#'
#' @importFrom dplyr "%>%" "select" "group_by" "tally" "filter"
#'
#' @example
#'
#' x <- c(2,2)
#' y <- c(2,2)
#' x_w <- c(2,6)
#' y_w <- c(1,5)
#' df_w <- data.frame(x_w, y_w)
#' df <- data.frame(x,y)
#' totals(df,  'weighted_avg' , df_w)
library(dplyr)
totals <- function(df, return, w1) {
rowtotal <- rowSums(Filter(is.numeric, df), na.rm = TRUE)
colsum_df <- colSums(Filter(is.numeric, df), na.rm = TRUE)
summarise_col <- df %>% summarise_if(is.numeric, sum, na.rm = TRUE)
col_sum <- summarise_all(df, funs(if(is.numeric(.)) sum(.) else "Character values found"))
totals_row <- rbind(Filter(is.numeric,df),totals = rowtotal)
totals_col <- cbind(Filter(is.numeric,df), totals = colsum_df)
weighted_avg <- weighted.mean(Filter(is.numeric, df), w1, na.rm=TRUE)
if(missing(w1) & return == 'totals_row') {
return (list(rowtotal, totals_row, table(totals_row)))
} else if (missing(w1) & return == 'totals_col') {
return (list(colsum_df, colsum_df, totals_col, table(col_sum), col_sum, summarise_col))
} else if (return == 'weighted_avg') {
return( weighted_avg)
}
}
fbind("row_col_avg.R")
fbind(row_col_avg.R)
library(usethis)
library(devtools)
fbind(row_col_avg.R)
devtools::install()
devtools::install()
devtools::install()
install.packages("magick")
devtools::install()
devtools::install()
devtools::install()
devtools::install()
install.packages("ellipsis")
devtools::install()
devtools::install()
install.packages("glue")
devtools::install()
devtools::install()
install.packages("rlang")
devtools::install()
install.packages("backports")
devtools::install()
library(kittens)
